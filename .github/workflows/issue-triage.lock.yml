# This file was automatically generated by gh-aw. DO NOT EDIT.
# To update this file, edit the corresponding .md file and run:
#   gh aw compile
# For more information: https://github.com/githubnext/gh-aw/blob/main/.github/instructions/github-agentic-workflows.instructions.md

name: "Issue Triage"
"on":
  issues:
    types:
    - opened
    - reopened

permissions: {}

concurrency:
  group: "gh-aw-${{ github.workflow }}-${{ github.event.issue.number }}"

run-name: "Issue Triage"

jobs:
  check-membership:
    runs-on: ubuntu-latest
    outputs:
      error_message: ${{ steps.check-membership.outputs.error_message }}
      is_team_member: ${{ steps.check-membership.outputs.is_team_member }}
      result: ${{ steps.check-membership.outputs.result }}
      user_permission: ${{ steps.check-membership.outputs.user_permission }}
    steps:
      - name: Check team membership for workflow
        id: check-membership
        uses: actions/github-script@v8
        env:
          GITHUB_AW_REQUIRED_ROLES: admin,maintainer
        with:
          script: |
            async function main() {
              const { eventName } = context;
              // skip check for safe events
              const safeEvents = ["workflow_dispatch", "workflow_run", "schedule"];
              if (safeEvents.includes(eventName)) {
                core.info(`✅ Event ${eventName} does not require validation`);
                core.setOutput("is_team_member", "true");
                core.setOutput("result", "safe_event");
                return;
              }
              const actor = context.actor;
              const { owner, repo } = context.repo;
              const requiredPermissionsEnv = process.env.GITHUB_AW_REQUIRED_ROLES;
              const requiredPermissions = requiredPermissionsEnv ? requiredPermissionsEnv.split(",").filter(p => p.trim() !== "") : [];
              if (!requiredPermissions || requiredPermissions.length === 0) {
                core.warning("❌ Configuration error: Required permissions not specified. Contact repository administrator.");
                core.setOutput("is_team_member", "false");
                core.setOutput("result", "config_error");
                core.setOutput("error_message", "Configuration error: Required permissions not specified");
                return;
              }
              // Check if the actor has the required repository permissions
              try {
                core.debug(`Checking if user '${actor}' has required permissions for ${owner}/${repo}`);
                core.debug(`Required permissions: ${requiredPermissions.join(", ")}`);
                const repoPermission = await github.rest.repos.getCollaboratorPermissionLevel({
                  owner: owner,
                  repo: repo,
                  username: actor,
                });
                const permission = repoPermission.data.permission;
                core.debug(`Repository permission level: ${permission}`);
                // Check if user has one of the required permission levels
                for (const requiredPerm of requiredPermissions) {
                  if (permission === requiredPerm || (requiredPerm === "maintainer" && permission === "maintain")) {
                    core.info(`✅ User has ${permission} access to repository`);
                    core.setOutput("is_team_member", "true");
                    core.setOutput("result", "authorized");
                    core.setOutput("user_permission", permission);
                    return;
                  }
                }
                core.warning(`User permission '${permission}' does not meet requirements: ${requiredPermissions.join(", ")}`);
                core.setOutput("is_team_member", "false");
                core.setOutput("result", "insufficient_permissions");
                core.setOutput("user_permission", permission);
                core.setOutput(
                  "error_message",
                  `Access denied: User '${actor}' is not authorized. Required permissions: ${requiredPermissions.join(", ")}`
                );
              } catch (repoError) {
                const errorMessage = repoError instanceof Error ? repoError.message : String(repoError);
                core.warning(`Repository permission check failed: ${errorMessage}`);
                core.setOutput("is_team_member", "false");
                core.setOutput("result", "api_error");
                core.setOutput("error_message", `Repository permission check failed: ${errorMessage}`);
                return;
              }
            }
            await main();

  activation:
    needs: check-membership
    if: needs.check-membership.outputs.is_team_member == 'true'
    runs-on: ubuntu-latest
    steps:
      - run: echo "Activation success"

  add_reaction:
    needs: activation
    if: >
      github.event_name == 'issues' || github.event_name == 'issue_comment' || github.event_name == 'pull_request_comment' ||
      github.event_name == 'pull_request_review_comment' || (github.event_name == 'pull_request') &&
      (github.event.pull_request.head.repo.full_name == github.repository)
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    outputs:
      reaction_id: ${{ steps.react.outputs.reaction-id }}
    steps:
      - name: Add eyes reaction to the triggering item
        id: react
        uses: actions/github-script@v8
        env:
          GITHUB_AW_REACTION: eyes
        with:
          script: |
            async function main() {
              const reaction = process.env.GITHUB_AW_REACTION || "eyes";
              const command = process.env.GITHUB_AW_COMMAND; 
              const runId = context.runId;
              const runUrl = context.payload.repository
                ? `${context.payload.repository.html_url}/actions/runs/${runId}`
                : `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}`;
              core.info(`Reaction type: ${reaction}`);
              core.info(`Command name: ${command || "none"}`);
              core.info(`Run ID: ${runId}`);
              core.info(`Run URL: ${runUrl}`);
              const validReactions = ["+1", "-1", "laugh", "confused", "heart", "hooray", "rocket", "eyes"];
              if (!validReactions.includes(reaction)) {
                core.setFailed(`Invalid reaction type: ${reaction}. Valid reactions are: ${validReactions.join(", ")}`);
                return;
              }
              let reactionEndpoint;
              let commentUpdateEndpoint;
              let shouldEditComment = false;
              const eventName = context.eventName;
              const owner = context.repo.owner;
              const repo = context.repo.repo;
              try {
                switch (eventName) {
                  case "issues":
                    const issueNumber = context.payload?.issue?.number;
                    if (!issueNumber) {
                      core.setFailed("Issue number not found in event payload");
                      return;
                    }
                    reactionEndpoint = `/repos/${owner}/${repo}/issues/${issueNumber}/reactions`;
                    shouldEditComment = false;
                    break;
                  case "issue_comment":
                    const commentId = context.payload?.comment?.id;
                    if (!commentId) {
                      core.setFailed("Comment ID not found in event payload");
                      return;
                    }
                    reactionEndpoint = `/repos/${owner}/${repo}/issues/comments/${commentId}/reactions`;
                    commentUpdateEndpoint = `/repos/${owner}/${repo}/issues/comments/${commentId}`;
                    shouldEditComment = command ? true : false;
                    break;
                  case "pull_request":
                    const prNumber = context.payload?.pull_request?.number;
                    if (!prNumber) {
                      core.setFailed("Pull request number not found in event payload");
                      return;
                    }
                    reactionEndpoint = `/repos/${owner}/${repo}/issues/${prNumber}/reactions`;
                    shouldEditComment = false;
                    break;
                  case "pull_request_review_comment":
                    const reviewCommentId = context.payload?.comment?.id;
                    if (!reviewCommentId) {
                      core.setFailed("Review comment ID not found in event payload");
                      return;
                    }
                    reactionEndpoint = `/repos/${owner}/${repo}/pulls/comments/${reviewCommentId}/reactions`;
                    commentUpdateEndpoint = `/repos/${owner}/${repo}/pulls/comments/${reviewCommentId}`;
                    shouldEditComment = command ? true : false;
                    break;
                  default:
                    core.setFailed(`Unsupported event type: ${eventName}`);
                    return;
                }
                core.info(`Reaction API endpoint: ${reactionEndpoint}`);
                await addReaction(reactionEndpoint, reaction);
                if (shouldEditComment && commentUpdateEndpoint) {
                  core.info(`Comment update endpoint: ${commentUpdateEndpoint}`);
                  await editCommentWithWorkflowLink(commentUpdateEndpoint, runUrl);
                } else {
                  if (!command && commentUpdateEndpoint) {
                    core.info("Skipping comment edit - only available for command workflows");
                  } else {
                    core.info(`Skipping comment edit for event type: ${eventName}`);
                  }
                }
              } catch (error) {
                const errorMessage = error instanceof Error ? error.message : String(error);
                core.error(`Failed to process reaction and comment edit: ${errorMessage}`);
                core.setFailed(`Failed to process reaction and comment edit: ${errorMessage}`);
              }
            }
            async function addReaction(endpoint, reaction) {
              const response = await github.request("POST " + endpoint, {
                content: reaction,
                headers: {
                  Accept: "application/vnd.github+json",
                },
              });
              const reactionId = response.data?.id;
              if (reactionId) {
                core.info(`Successfully added reaction: ${reaction} (id: ${reactionId})`);
                core.setOutput("reaction-id", reactionId.toString());
              } else {
                core.info(`Successfully added reaction: ${reaction}`);
                core.setOutput("reaction-id", "");
              }
            }
            async function editCommentWithWorkflowLink(endpoint, runUrl) {
              try {
                const getResponse = await github.request("GET " + endpoint, {
                  headers: {
                    Accept: "application/vnd.github+json",
                  },
                });
                const originalBody = getResponse.data.body || "";
                const workflowLinkText = `\n\n---\n*🤖 [Workflow run](${runUrl}) triggered by this comment*`;
                if (originalBody.includes("*🤖 [Workflow run](")) {
                  core.info("Comment already contains a workflow run link, skipping edit");
                  return;
                }
                const updatedBody = originalBody + workflowLinkText;
                const updateResponse = await github.request("PATCH " + endpoint, {
                  body: updatedBody,
                  headers: {
                    Accept: "application/vnd.github+json",
                  },
                });
                core.info(`Successfully updated comment with workflow link`);
                core.info(`Comment ID: ${updateResponse.data.id}`);
              } catch (error) {
                const errorMessage = error instanceof Error ? error.message : String(error);
                core.warning(
                  "Failed to edit comment with workflow link (This is not critical - the reaction was still added successfully): " + errorMessage
                );
              }
            }
            await main();

  agent:
    needs: activation
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Install GitHub Copilot CLI
        run: npm install -g @github/copilot
      - name: Setup MCPs
        run: |
          mkdir -p /tmp/mcp-config
          mkdir -p /home/runner/.copilot
          cat > /home/runner/.copilot/mcp-config.json << 'EOF'
          {
            "mcpServers": {
            }
          }
          EOF
          echo "-------START MCP CONFIG-----------"
          cat /home/runner/.copilot/mcp-config.json
          echo "-------END MCP CONFIG-----------"
          echo "-------/home/runner/.copilot-----------"
          find /home/runner/.copilot
          echo "HOME: $HOME"
          echo "GITHUB_COPILOT_CLI_MODE: $GITHUB_COPILOT_CLI_MODE"
      - name: Create prompt
        env:
          GITHUB_AW_PROMPT: /tmp/aw-prompts/prompt.txt
        run: |
          mkdir -p $(dirname "$GITHUB_AW_PROMPT")
          cat > $GITHUB_AW_PROMPT << 'EOF'
          # Issue Triage
          Summarize issue #${{ github.event.issue.number }} in 3 emojis.
          
          EOF
      - name: Print prompt to step summary
        env:
          GITHUB_AW_PROMPT: /tmp/aw-prompts/prompt.txt
        run: |
          echo "## Generated Prompt" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '``````markdown' >> $GITHUB_STEP_SUMMARY
          cat $GITHUB_AW_PROMPT >> $GITHUB_STEP_SUMMARY
          echo '``````' >> $GITHUB_STEP_SUMMARY
      - name: Generate agentic run info
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            
            const awInfo = {
              engine_id: "copilot",
              engine_name: "GitHub Copilot CLI",
              model: "",
              version: "",
              workflow_name: "Issue Triage",
              experimental: true,
              supports_tools_allowlist: true,
              supports_http_transport: true,
              run_id: context.runId,
              run_number: context.runNumber,
              run_attempt: process.env.GITHUB_RUN_ATTEMPT,
              repository: context.repo.owner + '/' + context.repo.repo,
              ref: context.ref,
              sha: context.sha,
              actor: context.actor,
              event_name: context.eventName,
              staged: false,
              created_at: new Date().toISOString()
            };
            
            // Write to /tmp directory to avoid inclusion in PR
            const tmpPath = '/tmp/aw_info.json';
            fs.writeFileSync(tmpPath, JSON.stringify(awInfo, null, 2));
            console.log('Generated aw_info.json at:', tmpPath);
            console.log(JSON.stringify(awInfo, null, 2));
            
            // Add agentic workflow run information to step summary
            core.summary
              .addRaw('## Agentic Run Information\n\n')
              .addRaw('```json\n')
              .addRaw(JSON.stringify(awInfo, null, 2))
              .addRaw('\n```\n')
              .write();
      - name: Upload agentic run info
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: aw_info.json
          path: /tmp/aw_info.json
          if-no-files-found: warn
      - name: Execute GitHub Copilot CLI
        id: agentic_execution
        timeout-minutes: 5
        run: |
          set -o pipefail
          
          INSTRUCTION=$(cat /tmp/aw-prompts/prompt.txt)
          
          # Run copilot CLI with log capture
          copilot --add-dir /tmp/ --log-level all --log-dir /tmp/.copilot/logs/ --prompt "$INSTRUCTION" 2>&1 | tee /tmp/agent-stdio.log
        env:
          COPILOT_AGENT_RUNNER_TYPE: STANDALONE
          GITHUB_STEP_SUMMARY: ${{ env.GITHUB_STEP_SUMMARY }}
          GITHUB_TOKEN: ${{ secrets.COPILOT_CLI_TOKEN  }}
          XDG_CONFIG_HOME: /home/runner
      - name: Ensure log file exists
        if: always()
        run: |
          # Ensure log file exists
          touch /tmp/agent-stdio.log
          # Show last few lines for debugging
          echo "=== Last 10 lines of Copilot execution log ==="
          tail -10 /tmp/agent-stdio.log || echo "No log content available"
      - name: Upload engine output files
        uses: actions/upload-artifact@v4
        with:
          name: agent_outputs
          path: |
            /tmp/.copilot/logs/
          if-no-files-found: ignore
      - name: Upload MCP logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mcp-logs
          path: /tmp/mcp-logs/
          if-no-files-found: ignore
      - name: Parse agent logs for step summary
        if: always()
        uses: actions/github-script@v8
        env:
          GITHUB_AW_AGENT_OUTPUT: /tmp/agent-stdio.log
        with:
          script: |
            function main() {
              const fs = require("fs");
              try {
                const logFile = process.env.AGENT_LOG_FILE;
                if (!logFile) {
                  console.log("No agent log file specified");
                  return;
                }
                if (!fs.existsSync(logFile)) {
                  console.log(`Log file not found: ${logFile}`);
                  return;
                }
                const content = fs.readFileSync(logFile, "utf8");
                const parsedLog = parseCopilotLog(content);
                if (parsedLog) {
                  core.summary.addRaw(parsedLog).write();
                  console.log("Copilot log parsed successfully");
                } else {
                  console.log("Failed to parse Copilot log");
                }
              } catch (error) {
                core.setFailed(error.message);
              }
            }
            function parseCopilotLog(logContent) {
              try {
                const lines = logContent.split("\n");
                let markdown = "## 🤖 GitHub Copilot CLI Execution\n\n";
                let hasOutput = false;
                let inCodeBlock = false;
                let currentCodeBlock = "";
                let currentLanguage = "";
                for (const line of lines) {
                  if (line.trim().startsWith("```")) {
                    if (!inCodeBlock) {
                      inCodeBlock = true;
                      currentLanguage = line.trim().substring(3);
                      currentCodeBlock = "";
                    } else {
                      inCodeBlock = false;
                      if (currentCodeBlock.trim()) {
                        markdown += `\`\`\`${currentLanguage}\n${currentCodeBlock}\`\`\`\n\n`;
                        hasOutput = true;
                      }
                      currentCodeBlock = "";
                      currentLanguage = "";
                    }
                    continue;
                  }
                  if (inCodeBlock) {
                    currentCodeBlock += line + "\n";
                    continue;
                  }
                  if (line.includes("copilot -p") || line.includes("github copilot")) {
                    markdown += `**Command:** \`${line.trim()}\`\n\n`;
                    hasOutput = true;
                  }
                  if (line.includes("Suggestion:") || line.includes("Response:")) {
                    markdown += `**${line.trim()}**\n\n`;
                    hasOutput = true;
                  }
                  if (line.toLowerCase().includes("error:")) {
                    markdown += `❌ **Error:** ${line.trim()}\n\n`;
                    hasOutput = true;
                  } else if (line.toLowerCase().includes("warning:")) {
                    markdown += `⚠️ **Warning:** ${line.trim()}\n\n`;
                    hasOutput = true;
                  }
                  const trimmedLine = line.trim();
                  if (
                    trimmedLine &&
                    !trimmedLine.startsWith("$") &&
                    !trimmedLine.startsWith("#") &&
                    !trimmedLine.match(/^\d{4}-\d{2}-\d{2}/) && 
                    trimmedLine.length > 10
                  ) {
                    if (
                      trimmedLine.includes("copilot") ||
                      trimmedLine.includes("suggestion") ||
                      trimmedLine.includes("generate") ||
                      trimmedLine.includes("explain")
                    ) {
                      markdown += `${trimmedLine}\n\n`;
                      hasOutput = true;
                    }
                  }
                }
                if (inCodeBlock && currentCodeBlock.trim()) {
                  markdown += `\`\`\`${currentLanguage}\n${currentCodeBlock}\`\`\`\n\n`;
                  hasOutput = true;
                }
                if (!hasOutput) {
                  markdown += "*No significant output captured from Copilot CLI execution.*\n";
                }
                return markdown;
              } catch (error) {
                console.error("Error parsing Copilot log:", error);
                return `## 🤖 GitHub Copilot CLI Execution\n\n*Error parsing log: ${error.message}*\n`;
              }
            }
            main();
      - name: Upload Agent Stdio
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: agent-stdio.log
          path: /tmp/agent-stdio.log
          if-no-files-found: warn
      - name: Validate agent logs for errors
        if: always()
        uses: actions/github-script@v8
        env:
          GITHUB_AW_AGENT_OUTPUT: /tmp/agent-stdio.log
          GITHUB_AW_ERROR_PATTERNS: "[{\"pattern\":\"(\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{3}Z)\\\\s+\\\\[(ERROR)\\\\]\\\\s+(.+)\",\"level_group\":2,\"message_group\":3,\"description\":\"Copilot CLI timestamped ERROR messages\"},{\"pattern\":\"(\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{3}Z)\\\\s+\\\\[(WARN|WARNING)\\\\]\\\\s+(.+)\",\"level_group\":2,\"message_group\":3,\"description\":\"Copilot CLI timestamped WARNING messages\"},{\"pattern\":\"\\\\[(\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{3}Z)\\\\]\\\\s+(CRITICAL|ERROR):\\\\s+(.+)\",\"level_group\":2,\"message_group\":3,\"description\":\"Copilot CLI bracketed critical/error messages with timestamp\"},{\"pattern\":\"\\\\[(\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{3}Z)\\\\]\\\\s+(WARNING):\\\\s+(.+)\",\"level_group\":2,\"message_group\":3,\"description\":\"Copilot CLI bracketed warning messages with timestamp\"},{\"pattern\":\"(Error):\\\\s+(.+)\",\"level_group\":1,\"message_group\":2,\"description\":\"Generic error messages from Copilot CLI or Node.js\"},{\"pattern\":\"npm ERR!\\\\s+(.+)\",\"level_group\":0,\"message_group\":1,\"description\":\"NPM error messages during Copilot CLI installation or execution\"},{\"pattern\":\"(Warning):\\\\s+(.+)\",\"level_group\":1,\"message_group\":2,\"description\":\"Generic warning messages from Copilot CLI\"},{\"pattern\":\"(Fatal error):\\\\s+(.+)\",\"level_group\":1,\"message_group\":2,\"description\":\"Fatal error messages from Copilot CLI\"},{\"pattern\":\"copilot:\\\\s+(error):\\\\s+(.+)\",\"level_group\":1,\"message_group\":2,\"description\":\"Copilot CLI command-level error messages\"},{\"pattern\":\"access denied.*only authorized.*can trigger.*workflow\",\"level_group\":0,\"message_group\":0,\"description\":\"Permission denied - workflow access restriction\"},{\"pattern\":\"access denied.*user.*not authorized\",\"level_group\":0,\"message_group\":0,\"description\":\"Permission denied - user not authorized\"},{\"pattern\":\"repository permission check failed\",\"level_group\":0,\"message_group\":0,\"description\":\"Repository permission check failure\"},{\"pattern\":\"configuration error.*required permissions not specified\",\"level_group\":0,\"message_group\":0,\"description\":\"Configuration error - missing permissions\"},{\"pattern\":\"permission.*denied\",\"level_group\":0,\"message_group\":0,\"description\":\"Generic permission denied error\"},{\"pattern\":\"unauthorized\",\"level_group\":0,\"message_group\":0,\"description\":\"Unauthorized access error\"},{\"pattern\":\"forbidden\",\"level_group\":0,\"message_group\":0,\"description\":\"Forbidden access error\"},{\"pattern\":\"access.*restricted\",\"level_group\":0,\"message_group\":0,\"description\":\"Access restricted error\"},{\"pattern\":\"insufficient.*permission\",\"level_group\":0,\"message_group\":0,\"description\":\"Insufficient permissions error\"},{\"pattern\":\"authentication failed\",\"level_group\":0,\"message_group\":0,\"description\":\"Authentication failure with Copilot CLI\"},{\"pattern\":\"token.*invalid\",\"level_group\":0,\"message_group\":0,\"description\":\"Invalid token error with Copilot CLI\"},{\"pattern\":\"not authorized.*copilot\",\"level_group\":0,\"message_group\":0,\"description\":\"Not authorized for Copilot CLI access\"}]"
        with:
          script: |
            function main() {
              const fs = require("fs");
              try {
                const logFile = process.env.GITHUB_AW_AGENT_OUTPUT;
                if (!logFile) {
                  throw new Error("GITHUB_AW_AGENT_OUTPUT environment variable is required");
                }
                if (!fs.existsSync(logFile)) {
                  throw new Error(`Log file not found: ${logFile}`);
                }
                const patterns = getErrorPatternsFromEnv();
                if (patterns.length === 0) {
                  throw new Error("GITHUB_AW_ERROR_PATTERNS environment variable is required and must contain at least one pattern");
                }
                const content = fs.readFileSync(logFile, "utf8");
                const hasErrors = validateErrors(content, patterns);
                if (hasErrors) {
                  core.setFailed("Errors detected in agent logs - failing workflow step");
                } else {
                  core.info("Error validation completed successfully");
                }
              } catch (error) {
                console.debug(error);
                core.setFailed(`Error validating log: ${error instanceof Error ? error.message : String(error)}`);
              }
            }
            function getErrorPatternsFromEnv() {
              const patternsEnv = process.env.GITHUB_AW_ERROR_PATTERNS;
              if (!patternsEnv) {
                throw new Error("GITHUB_AW_ERROR_PATTERNS environment variable is required");
              }
              try {
                const patterns = JSON.parse(patternsEnv);
                if (!Array.isArray(patterns)) {
                  throw new Error("GITHUB_AW_ERROR_PATTERNS must be a JSON array");
                }
                return patterns;
              } catch (e) {
                throw new Error(`Failed to parse GITHUB_AW_ERROR_PATTERNS as JSON: ${e instanceof Error ? e.message : String(e)}`);
              }
            }
            function validateErrors(logContent, patterns) {
              const lines = logContent.split("\n");
              let hasErrors = false;
              for (const pattern of patterns) {
                let regex;
                try {
                  regex = new RegExp(pattern.pattern, "g");
                } catch (e) {
                  core.error(`invalid error regex pattern: ${pattern.pattern}`);
                  continue;
                }
                for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {
                  const line = lines[lineIndex];
                  let match;
                  while ((match = regex.exec(line)) !== null) {
                    const level = extractLevel(match, pattern);
                    const message = extractMessage(match, pattern, line);
                    const errorMessage = `Line ${lineIndex + 1}: ${message} (Pattern: ${pattern.description || "Unknown pattern"}, Raw log: ${truncateString(line.trim(), 120)})`;
                    if (level.toLowerCase() === "error") {
                      core.error(errorMessage);
                      hasErrors = true;
                    } else {
                      core.warning(errorMessage);
                    }
                  }
                }
              }
              return hasErrors;
            }
            function extractLevel(match, pattern) {
              if (pattern.level_group && pattern.level_group > 0 && match[pattern.level_group]) {
                return match[pattern.level_group];
              }
              const fullMatch = match[0];
              if (fullMatch.toLowerCase().includes("error")) {
                return "error";
              } else if (fullMatch.toLowerCase().includes("warn")) {
                return "warning";
              }
              return "unknown";
            }
            function extractMessage(match, pattern, fullLine) {
              if (pattern.message_group && pattern.message_group > 0 && match[pattern.message_group]) {
                return match[pattern.message_group].trim();
              }
              return match[0] || fullLine.trim();
            }
            function truncateString(str, maxLength) {
              if (!str) return "";
              if (str.length <= maxLength) return str;
              return str.substring(0, maxLength) + "...";
            }
            if (typeof module !== "undefined" && module.exports) {
              module.exports = {
                validateErrors,
                extractLevel,
                extractMessage,
                getErrorPatternsFromEnv,
                truncateString,
              };
            }
            if (typeof module === "undefined" || require.main === module) {
              main();
            }

